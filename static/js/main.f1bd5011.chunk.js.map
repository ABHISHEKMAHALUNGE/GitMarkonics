{"version":3,"sources":["components/texteditor.js","App.js","reportWebVitals.js","index.js"],"names":["Texteditor","props","state","editorState","EditorState","createEmpty","onChange","setState","this","RichUtils","toggleInlineStyle","file","stateToHTML","getCurrentContent","hiddenElement","document","createElement","href","encodeURI","target","download","click","blocks","convertToRaw","console","log","value","map","block","text","trim","join","getPlainText","className","onClick","_onBoldClick","bind","_onItalicClick","_onUnderlineClick","onDownload","handleKeyCommand","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mRAWsBA,E,kDA+BlB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACC,YAAaC,cAAYC,eACvC,EAAKC,SAAW,SAAAH,GAAW,OAAI,EAAKI,SAAS,CAACJ,iBAH/B,E,2DA1BnBK,KAAKF,SAASG,YAAUC,kBAAkBF,KAAKN,MAAMC,YAAa,W,uCAGlEK,KAAKF,SAASG,YAAUC,kBAAkBF,KAAKN,MAAMC,YAAa,a,0CAGlEK,KAAKF,SAASG,YAAUC,kBAAkBF,KAAKN,MAAMC,YAAa,gB,mCAIlE,IAAMQ,EAAMC,YAAYJ,KAAKN,MAAMC,YAAYU,qBAC3CC,EAAgBC,SAASC,cAAc,KAE7CF,EAAcG,KAAO,wBAA0BC,UAAUP,GACzDG,EAAcK,OAAS,SACvBL,EAAcM,SAAW,WACzBN,EAAcO,QAEZ,IAAMC,EAASC,uBAAaf,KAAKN,MAAMC,YAAYU,qBAAqBS,OACxEE,QAAQC,IAAIH,GAChB,IAAMI,EAAQJ,EAAOK,KAAI,SAAAC,GAAK,OAAMA,EAAMC,KAAKC,OAAmBF,EAAMC,KAAf,QAAqBE,KAAK,MAC/EP,QAAQC,IAAI,MAAMjB,KAAKN,MAAMC,YAAYU,oBAAoBmB,aAAa,SAC1ER,QAAQC,IAAIC,GAEZF,QAAQC,IAAId,O,8CAUR,OACE,gCACA,wBAAQsB,UAAU,WAAWC,QAAS1B,KAAK2B,aAAaC,KAAK5B,MAA7D,kBACA,wBAAQyB,UAAU,WAAWC,QAAS1B,KAAK6B,eAAeD,KAAK5B,MAA/D,oBACA,wBAAQyB,UAAU,WAAWC,QAAS1B,KAAK8B,kBAAkBF,KAAK5B,MAAlE,uBACA,wBAAQyB,UAAU,WAAWC,QAAS1B,KAAK+B,WAAWH,KAAK5B,MAA3D,sBACE,qBAAKyB,UAAU,gBAAf,SACE,cAAC,SAAD,CAAQ9B,YAAaK,KAAKN,MAAMC,YAC5BqC,iBAAkBhC,KAAKgC,iBACvBlC,SAAUE,KAAKF,oB,GAhDQmC,aCE1BC,MAXf,WACE,OACE,sBAAKT,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,iCAGA,cAAC,EAAD,QCISU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASwC,eAAe,SAM1BZ,K","file":"static/js/main.f1bd5011.chunk.js","sourcesContent":["import React, {Component} from 'react'; \r\n// Importing Module \r\nimport {Editor, EditorState , RichUtils} from 'draft-js';\r\nimport 'draft-js/dist/Draft.css';\r\nimport './texteditor.css';\r\nimport {\r\n  convertToRaw,\r\n} from 'draft-js';\r\nimport { stateToHTML } from \"draft-js-export-html\";\r\n\r\n\r\n export default class Texteditor extends Component {\r\n  \r\n\r\n  \r\n  _onBoldClick() {\r\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\r\n  }\r\n  _onItalicClick() {\r\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'ITALIC'));\r\n  }\r\n  _onUnderlineClick() {\r\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'UNDERLINE'));\r\n    \r\n  }\r\n  onDownload(){\r\n    const file =stateToHTML(this.state.editorState.getCurrentContent());\r\n  const hiddenElement = document.createElement('a');\r\n\r\n  hiddenElement.href = 'data:attachment/text,' + encodeURI(file);\r\n  hiddenElement.target = '_blank';\r\n  hiddenElement.download = 'readm.md';\r\n  hiddenElement.click();\r\n    \r\n    const blocks = convertToRaw(this.state.editorState.getCurrentContent()).blocks;\r\n    console.log(blocks);\r\nconst value = blocks.map(block => (!block.text.trim() && '\\n') || block.text).join('\\n');\r\n    console.log(\"1. \"+this.state.editorState.getCurrentContent().getPlainText('\\u0001'));\r\n    console.log(value);\r\n    \r\n    console.log(file);\r\n  }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {editorState: EditorState.createEmpty()};\r\n        this.onChange = editorState => this.setState({editorState});\r\n       \r\n      }\r\n    \r\n      render() {\r\n        return (\r\n          <div>\r\n          <button className=\"b-button\" onClick={this._onBoldClick.bind(this)}>Bold</button>\r\n          <button className=\"b-button\" onClick={this._onItalicClick.bind(this)}>Italic</button>\r\n          <button className=\"b-button\" onClick={this._onUnderlineClick.bind(this)}>Underline</button>\r\n          <button className=\"b-button\" onClick={this.onDownload.bind(this)}>download</button>\r\n            <div className=\"editors-panel\">\r\n              <Editor editorState={this.state.editorState}\r\n                  handleKeyCommand={this.handleKeyCommand}\r\n                  onChange={this.onChange} /></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './App.css';\r\nimport  Texteditor from './components/texteditor';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      Beautiful readme.md\r\n      </header> \r\n      <Texteditor/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}